clear
REGION=us-central1
CYAN='\033[0;36m'
LCYAN='\033[1;36m'
NC='\033[0m' # No Color

printf "******************************************************************************** \n"
printf "${LCYAN}SCALER INSTALL${NC} \n"
printf "This process will create a fully functioning image thumbnail makers app including all infrastructure.\n"
printf "It's going to take upwards of 5 mins \n"
printf "******************************************************************************** \n"

PROJECT=$(gcloud config get-value project | xargs)

# Allow user to overide the project id. 
printf "Enter the name for the project which will host the applicaition [leave blank for ${LCYAN}'${PROJECT}'${NC}]: "
read USER_PROJECT_ID

if [[ $USER_PROJECT_ID ]]
then
      PROJECT=$USER_PROJECT_ID
fi

if [[ !($PROJECT) ]]
then
      printf "\nSorry, a Project ID must be specified \n"
	  exit 1;
fi

gcloud config set project ${PROJECT}

# Allow user to overide the default region. 
printf "Enter a Google Cloud Region [leave blank for ${LCYAN}'${REGION}'${NC}]: "
read USERREGION

if [[ $USERREGION ]]
then
      REGION=$USERREGION
fi

# Allow user to overide the default Bucket name. 
BUCKET=$PROJECT-bucket
printf "Enter a name for the Cloud Storage Bucket [leave blank for ${LCYAN}'${BUCKET}'${NC}]: "
read USERBUCKET

if [[ $USERBUCKET ]]
then
      BUCKET=$USERBUCKET
fi


# All of these require the project id to be set. 
PROJECTNUMBER=$(gcloud projects list --filter="$PROJECT" --format="value(PROJECT_NUMBER)" | xargs)	
SABUILD=$PROJECTNUMBER@cloudbuild.gserviceaccount.com
SACOMPUTE=$PROJECTNUMBER-compute@developer.gserviceaccount.com

printf "${LCYAN}Project Details${NC} \n"
printf "Project ID:         $PROJECT \n"
printf "Project Number:     $PROJECTNUMBER \n"
printf "Bucket:             $BUCKET \n"



printf "******************************************************************************** \n"
printf "Enabling services in your GCP project \n"
gcloud services enable cloudbuild.googleapis.com || true
gcloud services enable storage.googleapis.com || true
gcloud services enable cloudfunctions.googleapis.com || true
gcloud services enable run.googleapis.com || true
printf "Enabling services in your GCP project - done \n"


printf "******************************************************************************** \n"
printf "Creating the Storage Bucket to use \n"
gsutil mb gs://$BUCKET
printf "Creating the Storage Bucket to use - done \n"




printf "******************************************************************************** \n"
printf "Setting permissions \n"
printf "Enabling Cloud Build Service Account to deploy to Cloud Run on $PROJECT \n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member serviceAccount:$SABUILD \
	--role roles/run.developer --no-user-output-enabled
printf "Enabling Cloud Build Service Account to perform Service Account activities \n"
gcloud projects add-iam-policy-binding $PROJECT \
  	--member serviceAccount:$SABUILD \
  	--role roles/iam.serviceAccountUser --no-user-output-enabled
printf "Enabling Cloud Build Service Account to act on behalf of Compute Service Account \n"	  
gcloud iam service-accounts add-iam-policy-binding $SACOMPUTE \
	--member=serviceAccount:$SABUILD \
	--role roles/iam.serviceAccountUser --no-user-output-enabled 
printf "Enabling Cloud Build Service Account to publish to Cloud Run \n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member=serviceAccount:$SABUILD \
	--role=roles/run.admin --no-user-output-enabled
printf "Enabling Cloud Build Service Account to publish to Cloud Functions \n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member=serviceAccount:$SABUILD \
	--role=roles/cloudfunctions.developer --no-user-output-enabled
printf "Setting permissions - done \n"

printf "******************************************************************************** \n"
printf "Deploying to Cloud Run and Cloud Functions \n"
gcloud builds submit --substitutions=_BUCKET=$BUCKET,_REGION=$REGION .
printf "Deploying to Cloud Run and Cloud Functions- done \n"


URL=$(gcloud run services describe scaler-app --region=$REGION --format="value(status.url)" | xargs)

printf "******************************************************************************** \n"
printf "CONGRATS!!!!!!! \n"
printf "You have configured a project, spun up architecture and deployed code.\n"
printf "See your application at: \n"
printf "\n ${CYAN}$URL${NC} \n"
printf "******************************************************************************** \n"	